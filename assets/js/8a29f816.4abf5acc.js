"use strict";(self.webpackChunkdistributed_systems=self.webpackChunkdistributed_systems||[]).push([[179],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>m});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var p=a.createContext({}),o=function(e){var t=a.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},u=function(e){var t=o(e.components);return a.createElement(p.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},c=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,p=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),c=o(n),m=r,g=c["".concat(p,".").concat(m)]||c[m]||d[m]||i;return n?a.createElement(g,s(s({ref:t},u),{},{components:n})):a.createElement(g,s({ref:t},u))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,s=new Array(i);s[0]=c;var l={};for(var p in t)hasOwnProperty.call(t,p)&&(l[p]=t[p]);l.originalType=e,l.mdxType="string"==typeof e?e:r,s[1]=l;for(var o=2;o<i;o++)s[o]=n[o];return a.createElement.apply(null,s)}return a.createElement.apply(null,n)}c.displayName="MDXCreateElement"},7546:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>s,default:()=>d,frontMatter:()=>i,metadata:()=>l,toc:()=>o});var a=n(7462),r=(n(7294),n(3905));const i={},s="Lesson",l={unversionedId:"labs/Lab 6 - Web API Design/Lesson",id:"labs/Lab 6 - Web API Design/Lesson",title:"Lesson",description:"Table of Contents",source:"@site/docs/labs/06.Lab 6 - Web API Design/Lesson.md",sourceDirName:"labs/06.Lab 6 - Web API Design",slug:"/labs/Lab 6 - Web API Design/Lesson",permalink:"/docs/labs/Lab 6 - Web API Design/Lesson",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Lesson",permalink:"/docs/labs/Lab 5 - Git Basics/Lesson"},next:{title:"Lesson",permalink:"/docs/labs/Lab 7 - Docker/Lesson"}},p={},o=[{value:"<strong>Table of Contents</strong>",id:"table-of-contents",level:2},{value:"<strong>Requirements</strong>",id:"requirements",level:3},{value:"<strong>Objectives</strong>",id:"objectives",level:3},{value:"<strong>Web API</strong>",id:"web-api",level:3},{value:"<strong>SOA</strong>",id:"soa",level:3},{value:"<strong>Exercise 1: GraphQL Queries</strong>",id:"exercise-1-graphql-queries",level:2},{value:"<strong>Create Solution and Project</strong>",id:"create-solution-and-project",level:3},{value:"<strong>Run and test project</strong>",id:"run-and-test-project",level:3},{value:"<strong>Exercise 2: GraphQL Mutations</strong>",id:"exercise-2-graphql-mutations",level:2},{value:"<strong>Run and test project</strong>",id:"run-and-test-project-1",level:3},{value:"<strong>Exercise 3: gRPC Queries</strong>",id:"exercise-3-grpc-queries",level:2},{value:"<strong>Protocol Buffers</strong>",id:"protocol-buffers",level:3},{value:"<strong>Create Project</strong>",id:"create-project",level:3},{value:"<strong>Run and test project</strong>",id:"run-and-test-project-2",level:3},{value:"<strong>Exercise 4: gRPC Commands</strong>",id:"exercise-4-grpc-commands",level:2},{value:"<strong>Run and test project</strong>",id:"run-and-test-project-3",level:3}],u={toc:o};function d(e){let{components:t,...i}=e;return(0,r.kt)("wrapper",(0,a.Z)({},u,i,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"lesson"},"Lesson"),(0,r.kt)("h1",{id:"lab-6-web-api-design"},"Lab 6: Web API Design"),(0,r.kt)("h2",{id:"table-of-contents"},(0,r.kt)("strong",{parentName:"h2"},"Table of Contents")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#lesson"},"Lesson")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#lab-6-web-api-design"},"Lab 6: Web API Design"),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#table-of-contents"},(0,r.kt)("strong",{parentName:"a"},"Table of Contents")),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#requirements"},(0,r.kt)("strong",{parentName:"a"},"Requirements"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#objectives"},(0,r.kt)("strong",{parentName:"a"},"Objectives"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#web-api"},(0,r.kt)("strong",{parentName:"a"},"Web API"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#soa"},(0,r.kt)("strong",{parentName:"a"},"SOA"))))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#exercise-1-graphql-queries"},(0,r.kt)("strong",{parentName:"a"},"Exercise 1: GraphQL Queries")),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#create-solution-and-project"},(0,r.kt)("strong",{parentName:"a"},"Create Solution and Project"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#run-and-test-project"},(0,r.kt)("strong",{parentName:"a"},"Run and test project"))))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#exercise-2-graphql-mutations"},(0,r.kt)("strong",{parentName:"a"},"Exercise 2: GraphQL Mutations")),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#run-and-test-project-1"},(0,r.kt)("strong",{parentName:"a"},"Run and test project"))))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#exercise-3-grpc-queries"},(0,r.kt)("strong",{parentName:"a"},"Exercise 3: gRPC Queries")),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#protocol-buffers"},(0,r.kt)("strong",{parentName:"a"},"Protocol Buffers"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#create-project"},(0,r.kt)("strong",{parentName:"a"},"Create Project"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#run-and-test-project-2"},(0,r.kt)("strong",{parentName:"a"},"Run and test project"))))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#exercise-4-grpc-commands"},(0,r.kt)("strong",{parentName:"a"},"Exercise 4: gRPC Commands")),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#run-and-test-project-3"},(0,r.kt)("strong",{parentName:"a"},"Run and test project")))))))),(0,r.kt)("h3",{id:"requirements"},(0,r.kt)("strong",{parentName:"h3"},"Requirements")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://dotnet.microsoft.com/en-us/download"},".NET 7 SDK")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://www.postman.com/downloads/"},"Postman application"))),(0,r.kt)("h3",{id:"objectives"},(0,r.kt)("strong",{parentName:"h3"},"Objectives")),(0,r.kt)("p",null,"In this LAB you will learn about different web api designs and how to implement them."),(0,r.kt)("h3",{id:"web-api"},(0,r.kt)("strong",{parentName:"h3"},"Web API")),(0,r.kt)("p",null,"A ",(0,r.kt)("strong",{parentName:"p"},"Web API")," is an application programming interface for either a web server or a web browser.\nIt is a web development concept, usually limited to a web application's client-side (including any web frameworks being used),\nand thus usually does not include web server or browser implementation details such as SAPIs or APIs unless publicly accessible by a remote web application."),(0,r.kt)("h3",{id:"soa"},(0,r.kt)("strong",{parentName:"h3"},"SOA")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"SOA")," or Service-Oriented Architecture is a style of software design in\nto which defined services provide service to other application components over the network protocol.\n",(0,r.kt)("strong",{parentName:"p"},"SOA")," is technology, product and platform independent."),(0,r.kt)("p",null,"According to the definition of service-oriented architecture, a service is defined by the following properties:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"describes business logic with a specific outcome"),(0,r.kt)("li",{parentName:"ul"},"the service is self-contained"),(0,r.kt)("li",{parentName:"ul"},"the logic is isolated from the consumer, the consumer does not need to know the implementation details"),(0,r.kt)("li",{parentName:"ul"},"may include other services.")),(0,r.kt)("p",null,"Common views on SOA architecture are:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"REST")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"GraphQL")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"gRPC")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"SOAP")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"WCF"))),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"REST")," architecture is most commonly used and easiest to implement because all modern web server frameworks support it by default."),(0,r.kt)("p",null,"We have worked on REST in past labs and in this lab we will focus on ",(0,r.kt)("strong",{parentName:"p"},"GraphQL")," abd ",(0,r.kt)("strong",{parentName:"p"},"gRPC"),"."),(0,r.kt)("h2",{id:"exercise-1-graphql-queries"},(0,r.kt)("strong",{parentName:"h2"},"Exercise 1: GraphQL Queries")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"GraphQL")," is an open source language for data processing and manipulation.\n",(0,r.kt)("strong",{parentName:"p"},"GraphQL")," allows clients to define the structure of the data returned by the server,\nand thus prevents large amounts of unnecessary data from being transferred,\nhowever this reduces effectiveness save query cache."),(0,r.kt)("p",null,"GraphQL consists of:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"data types"),(0,r.kt)("li",{parentName:"ul"},"query language (SDL)"),(0,r.kt)("li",{parentName:"ul"},"execution semantics"),(0,r.kt)("li",{parentName:"ul"},"static validations"),(0,r.kt)("li",{parentName:"ul"},"introspection of data types.")),(0,r.kt)("p",null,"Supported operations are:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"reading"),(0,r.kt)("li",{parentName:"ul"},"writing"),(0,r.kt)("li",{parentName:"ul"},"subscription via web hook.")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"GraphQL")," has two main approaches:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Schema First Approach",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"The Schema first approach relies upon the GraphQL schema language, coding conventions, and tries to provide a minimal amount of syntax."),(0,r.kt)("li",{parentName:"ul"},"It is the easiest to get started though it does not currently support some advanced scenarios."))),(0,r.kt)("li",{parentName:"ul"},"Graph Type Approach",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"The GraphType first approach can be more verbose, but gives you access to all of the provided properties of your GraphType's and Schema."),(0,r.kt)("li",{parentName:"ul"},"You are required to use inheritance to leverage that functionality.")))),(0,r.kt)("p",null,"In this exercise you will use Graph Type Spproach."),(0,r.kt)("h3",{id:"create-solution-and-project"},(0,r.kt)("strong",{parentName:"h3"},"Create Solution and Project")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Create new solution ",(0,r.kt)("inlineCode",{parentName:"li"},"WebApiDesign"),", new webapi project ",(0,r.kt)("inlineCode",{parentName:"li"},"WebApiDesign.GraphQlApi")," and new class library project ",(0,r.kt)("inlineCode",{parentName:"li"},"WebApiDesign.Model"))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sh"},"dotnet new sln --name WebApiDesign\ndotnet new classlib --name WebApiDesign.Model\ndotnet new webapi --name WebApiDesign.GraphQlApi\n")),(0,r.kt)("p",null,"Add Projects to solution and add reference to project ",(0,r.kt)("inlineCode",{parentName:"p"},"WebApiDesign.Model")," in project ",(0,r.kt)("inlineCode",{parentName:"p"},"WebApiDesign.GraphQlApi")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sh"},"dotnet sln add WebApiDesign.Model/WebApiDesign.Model.csproj\ndotnet sln add WebApiDesign.GraphQlApi/WebApiDesign.GraphQlApi.csproj\ndotnet add WebApiDesign.GraphQlApi/WebApiDesign.GraphQlApi.csproj reference WebApiDesign.Model/WebApiDesign.Model.csproj\n")),(0,r.kt)("p",null,"Add GraphQL packages to ",(0,r.kt)("inlineCode",{parentName:"p"},"WebApiDesign.GraphQlApi")," project:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sh"},"dotnet add WebApiDesign.GraphQlApi/WebApiDesign.GraphQlApi.csproj package GraphQL\ndotnet add WebApiDesign.GraphQlApi/WebApiDesign.GraphQlApi.csproj package GraphQL.SystemTextJson\ndotnet add WebApiDesign.GraphQlApi/WebApiDesign.GraphQlApi.csproj package GraphQL.MicrosoftDI\ndotnet add WebApiDesign.GraphQlApi/WebApiDesign.GraphQlApi.csproj package GraphQL.Server.Transports.AspNetCore\n")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"In project ",(0,r.kt)("inlineCode",{parentName:"li"},"WebApiDesign.Model")," add class and file ",(0,r.kt)("inlineCode",{parentName:"li"},"Subject"),":")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},"namespace WebApiDesign.Model;\n\npublic class Subject\n{\n    public Subject(int id, string name, int ect)\n    {\n        Id = id;\n        Name = name;\n        Ect = ect;\n    }\n\n    public int Id { get; }\n\n    public string Name { get; }\n\n    public int Ect { get; }\n}\n")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"In project ",(0,r.kt)("inlineCode",{parentName:"li"},"WebApiDesign.Model")," add class and file ",(0,r.kt)("inlineCode",{parentName:"li"},"Student"),":")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},"namespace WebApiDesign.Model;\n\npublic class Student\n{\n    public Student(\n        int id,\n        string name,\n        DateOnly dob,\n        IEnumerable<double> grades,\n        IEnumerable<Subject> subjects)\n    {\n        Id = id;\n        Name = name;\n        Dob = dob;\n        Grades = grades;\n        Subjects = subjects;\n    }\n\n    public int Id { get; }\n\n    public string Name { get; }\n\n    public DateOnly Dob { get; }\n\n    public IEnumerable<double> Grades { get; }\n\n    public IEnumerable<Subject> Subjects { get; }\n}\n")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"In project ",(0,r.kt)("inlineCode",{parentName:"li"},"WebApiDesign.Model")," add class and file ",(0,r.kt)("inlineCode",{parentName:"li"},"StudentsRepository"),":")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},'namespace WebApiDesign.Model;\n\npublic class StudentsRepository\n{\n\n    private readonly IEnumerable<Subject> _subjects = new[]\n    {\n        new Subject(1, "PIZ", 10),\n        new Subject(2, "DIS", 12),\n    };\n\n    private readonly ICollection<Student> _students;\n\n    public StudentsRepository(int numberOfStudents)\n    {\n        _students = Enumerable\n            .Range(0, numberOfStudents)\n            .Select(index => new Student(\n                id: index,\n                name: $"Student{index}",\n                dob: new DateOnly(1999, 1, 1),\n                grades: new[] { 2d, 3d, 4d, 4d },\n                subjects: _subjects))\n            .ToList();\n    }\n\n    public IEnumerable<Student> GetAllStudents()\n    {\n        return _students;\n    }\n\n    public Student? GetStudent(int id)\n    {\n        return _students.FirstOrDefault(student => student.Id == id);\n    }\n\n    public void CreateStudent(string name)\n    {\n        var id = _students.Max(s => s.Id) + 1;\n\n        var student = new Student(\n            id: id,\n            name: name,\n            dob: new DateOnly(1999, 1, 1),\n            grades: new[] { 2d, 5d, 3d, 4d },\n            subjects: _subjects);\n\n        _students.Add(student);\n    }\n\n    public void UpdateStudent(int id, string newName)\n    {\n        var studentToUpdate = _students.FirstOrDefault(student => student.Id == id);\n\n        if (studentToUpdate is null)\n        {\n            throw new Exception("Student was not found");\n        }\n\n        var updatedStudent = new Student(\n            id: studentToUpdate.Id,\n            name: newName,\n            dob: studentToUpdate.Dob,\n            grades: studentToUpdate.Grades,\n            subjects: studentToUpdate.Subjects);\n\n        _ = _students.Remove(studentToUpdate);\n\n        _students.Add(updatedStudent);\n    }\n\n    public void DeleteStudent(int id)\n    {\n        var studentToDelete = _students.FirstOrDefault(student => student.Id == id);\n\n        if (studentToDelete is null)\n        {\n            throw new Exception("Student was not found");\n        }\n\n        _ = _students.Remove(studentToDelete);\n    }\n}\n\n')),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"In project ",(0,r.kt)("inlineCode",{parentName:"p"},"WebApiDesign.GraphQlApi")," create folder ",(0,r.kt)("inlineCode",{parentName:"p"},"GraphQlTypes"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"In folder ",(0,r.kt)("inlineCode",{parentName:"p"},"GraphQlTypes")," create file ",(0,r.kt)("inlineCode",{parentName:"p"},"SubjectType.cs")," with following contents:"))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},"using GraphQL.Types;\nusing WebApiDesign.Model;\n\nnamespace WebApiDesign.GraphQlApi.GraphQlTypes;\n\npublic class SubjectType : ObjectGraphType<Subject>\n{\n\n    public SubjectType()\n    {\n        Name = nameof(Subject);\n        _ = Field(s => s.Id);\n        _ = Field(s => s.Name, nullable: false);\n        _ = Field(s => s.Ect);\n    }\n}\n")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"In folder ",(0,r.kt)("inlineCode",{parentName:"li"},"GraphQlTypes")," create file ",(0,r.kt)("inlineCode",{parentName:"li"},"StudentType.cs")," with following contents:")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},"using GraphQL.Types;\nusing WebApiDesign.Model;\n\nnamespace WebApiDesign.GraphQlApi.GraphQlTypes;\n\npublic class StudentType : ObjectGraphType<Student>\n{\n    public StudentType()\n    {\n        Name = nameof(Student);\n        _ = Field(s => s.Id);\n        _ = Field(s => s.Name, nullable: false);\n        _ = Field(s => s.Dob);\n        _ = Field(s => s.Grades, nullable: false);\n        _ = Field<ListGraphType<SubjectType>>(nameof(Student.Subjects));\n    }\n}\n")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"In folder ",(0,r.kt)("inlineCode",{parentName:"li"},"GraphQlTypes")," create file ",(0,r.kt)("inlineCode",{parentName:"li"},"StudentQuery.cs")," with following contents:")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},'using GraphQL;\nusing GraphQL.Types;\nusing WebApiDesign.Model;\n\nnamespace WebApiDesign.GraphQlApi.GraphQlTypes;\n\npublic class StudentQuery : ObjectGraphType\n{\n    public StudentQuery(StudentsRepository studentsRepository)\n    {\n        Name = nameof(StudentQuery);\n        _ = Field<ListGraphType<StudentType>>("getStudents")\n            .Resolve(_ =>\n            {\n                return studentsRepository.GetAllStudents();\n            });\n\n        _ = Field<StudentType>("getStudent")\n            .Argument<IntGraphType>("id")\n            .Resolve(resolveFieldContext =>\n            {\n                var studentId = resolveFieldContext.GetArgument<int>("id");\n\n                return studentsRepository.GetStudent(studentId);\n            });\n    }\n}\n')),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"In folder ",(0,r.kt)("inlineCode",{parentName:"li"},"GraphQlTypes")," create file ",(0,r.kt)("inlineCode",{parentName:"li"},"StudentMutations.cs")," with following contents:")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},"using GraphQL;\nusing GraphQL.Types;\nusing WebApiDesign.Model;\n\nnamespace WebApiDesign.GraphQlApi.GraphQlTypes;\n\npublic class StudentMutation : ObjectGraphType\n{\n    public StudentMutation(StudentsRepository studentsRepository)\n    {\n        // TODO: Implement\n    }\n}\n")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"In folder ",(0,r.kt)("inlineCode",{parentName:"li"},"GraphQlTypes")," create file ",(0,r.kt)("inlineCode",{parentName:"li"},"WebApiDesignSchema.cs")," with following contents:")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},"using GraphQL.Types;\n\nnamespace WebApiDesign.GraphQlApi.GraphQlTypes;\n\npublic class WebApiDesignSchema : Schema\n{\n\n    public WebApiDesignSchema(IServiceProvider serviceProvider) : base(serviceProvider)\n    {\n        Query = serviceProvider.GetRequiredService<StudentQuery>();\n        //Mutation = serviceProvider.GetRequiredService<StudentMutation>();\n    }\n}\n")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"In project ",(0,r.kt)("inlineCode",{parentName:"p"},"WebApiDesign.GraphQlApi")," delete folder ",(0,r.kt)("inlineCode",{parentName:"p"},"Controllers")," and file ",(0,r.kt)("inlineCode",{parentName:"p"},"WeatherForecast.cs"),":")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Modify file ",(0,r.kt)("inlineCode",{parentName:"p"},"Program")," to look as following:"))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},"using GraphQL;\nusing GraphQL.MicrosoftDI;\nusing GraphQL.Types;\nusing WebApiDesign.GraphQlApi.GraphQlTypes;\nusing WebApiDesign.Model;\n\nvar builder = WebApplication.CreateBuilder(args);\n\nbuilder.Services.AddSingleton(_ => new StudentsRepository(100));\nbuilder.Services.AddGraphQL(builder =>\n{\n    builder.AddSystemTextJson()\n        .AddErrorInfoProvider(errorInfoProvider =>\n        {\n#if DEBUG\n            errorInfoProvider.ExposeData = true;\n            errorInfoProvider.ExposeExceptionDetails = true;\n            errorInfoProvider.ExposeExceptionDetails = true;\n            errorInfoProvider.ExposeExceptionDetailsMode = GraphQL.Execution.ExposeExceptionDetailsMode.Message;\n#endif\n        })\n        .AddSchema<WebApiDesignSchema>();\n});\nbuilder.Services.AddSingleton<ISchema, WebApiDesignSchema>(servicesProvider => new WebApiDesignSchema(new SelfActivatingServiceProvider(servicesProvider)));\n\nvar app = builder.Build();\n\napp.UseGraphQL<ISchema>();\n\napp.Run();\n")),(0,r.kt)("h3",{id:"run-and-test-project"},(0,r.kt)("strong",{parentName:"h3"},"Run and test project")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Using postman application test query ",(0,r.kt)("inlineCode",{parentName:"li"},"getStudents"),":")),(0,r.kt)("p",null,(0,r.kt)("img",{alt:"postman-get-students-graphql-query",src:n(3629).Z,width:"1537",height:"972"})),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Using postman application test query ",(0,r.kt)("inlineCode",{parentName:"li"},"getStudent"),":")),(0,r.kt)("p",null,(0,r.kt)("img",{alt:"postman-get-student-graphql-query-1",src:n(9844).Z,width:"1547",height:"911"})),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"In query ",(0,r.kt)("inlineCode",{parentName:"li"},"getStudent")," edit GraphQL request body to look like this")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-graphql"},"{ \n    getStudent(id: 1) {\n        id,\n        name,\n        dob,\n        subjects {\n            id,\n            name,\n            ect\n        }\n    }\n}\n")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Observe changes after executing request again:")),(0,r.kt)("p",null,(0,r.kt)("img",{alt:"postman-get-student-graphql-query-2",src:n(5735).Z,width:"1541",height:"986"})),(0,r.kt)("h2",{id:"exercise-2-graphql-mutations"},(0,r.kt)("strong",{parentName:"h2"},"Exercise 2: GraphQL Mutations")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"In folder ",(0,r.kt)("inlineCode",{parentName:"li"},"GraphQlTypes")," modify file ",(0,r.kt)("inlineCode",{parentName:"li"},"WebApiDesignSchema.cs")," with following contents:")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},"using GraphQL.Types;\n\nnamespace WebApiDesign.GraphQlApi.GraphQlTypes;\n\npublic class WebApiDesignSchema : Schema\n{\n\n    public WebApiDesignSchema(IServiceProvider serviceProvider) : base(serviceProvider)\n    {\n        Query = serviceProvider.GetRequiredService<StudentQuery>();\n        Mutation = serviceProvider.GetRequiredService<StudentMutation>();\n    }\n}\n")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"In project ",(0,r.kt)("inlineCode",{parentName:"li"},"WebApiDesign.GraphQlApi")," in folder ",(0,r.kt)("inlineCode",{parentName:"li"},"GraphQlTypes")," implement class ",(0,r.kt)("inlineCode",{parentName:"li"},"StudentMutation"),":")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},"using GraphQL;\nusing GraphQL.Types;\nusing WebApiDesign.Model;\n\nnamespace WebApiDesign.GraphQlApi.GraphQlTypes;\n\npublic class StudentMutation : ObjectGraphType\n{\n    public StudentMutation(StudentsRepository studentsRepository)\n    {\n        // TODO: Implement\n    }\n}\n")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Add field ",(0,r.kt)("inlineCode",{parentName:"p"},"createStudent")," which creates new student using ",(0,r.kt)("inlineCode",{parentName:"p"},"studentsRepository")),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"It receives non nullable string argument ",(0,r.kt)("inlineCode",{parentName:"li"},"name")),(0,r.kt)("li",{parentName:"ul"},"It returns created student"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Add field ",(0,r.kt)("inlineCode",{parentName:"p"},"updateStudent")," which updates student using ",(0,r.kt)("inlineCode",{parentName:"p"},"studentsRepository")),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"It receives int argument ",(0,r.kt)("inlineCode",{parentName:"li"},"id")),(0,r.kt)("li",{parentName:"ul"},"It receives non nullable string argument ",(0,r.kt)("inlineCode",{parentName:"li"},"name")),(0,r.kt)("li",{parentName:"ul"},"It returns updated student"))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"Add field ",(0,r.kt)("inlineCode",{parentName:"p"},"deleteStudent")," which deletes student using ",(0,r.kt)("inlineCode",{parentName:"p"},"studentsRepository")),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"It receives int argument ",(0,r.kt)("inlineCode",{parentName:"li"},"id")),(0,r.kt)("li",{parentName:"ul"},"It returns deleted student")))),(0,r.kt)("h3",{id:"run-and-test-project-1"},(0,r.kt)("strong",{parentName:"h3"},"Run and test project")),(0,r.kt)("p",null,"Run and test project using Postman application."),(0,r.kt)("h2",{id:"exercise-3-grpc-queries"},(0,r.kt)("strong",{parentName:"h2"},"Exercise 3: gRPC Queries")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"gRPC")," is a modern open source high performance Remote Procedure Call (RPC) framework that can run in any environment.\nIt can efficiently connect services in and across data centers with pluggable support for load balancing, tracing, health checking and authentication.\nIt is also applicable in last mile of distributed computing to connect devices, mobile applications and browsers to backend services."),(0,r.kt)("h3",{id:"protocol-buffers"},(0,r.kt)("strong",{parentName:"h3"},"Protocol Buffers")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"gRPC")," can use protocol buffers as both its Interface Definition Language (IDL) and as its underlying message interchange format.\nIn gRPC, a client application can directly call a method on a server application on a different machine as if it were a local object (",(0,r.kt)("strong",{parentName:"p"},"Proxy Pattern"),"),\nmaking it easier for you to create distributed applications and services.\nAs in many ",(0,r.kt)("strong",{parentName:"p"},"RPC")," systems, ",(0,r.kt)("strong",{parentName:"p"},"gRPC")," is based around the idea of defining a service,\nspecifying the methods that can be called remotely with their parameters and return types.\nOn the server side, the server implements this interface and runs a gRPC server to handle client calls.\nOn the client side, the client has a stub (referred to as just a client in some languages) that provides the same methods as the server."),(0,r.kt)("p",null,"Example of simple ",(0,r.kt)("strong",{parentName:"p"},"protobuf")," (Protocol Buffers) definition:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-protobuf"},"// The greeter service definition.\nservice Greeter {\n  // Sends a greeting\n  rpc SayHello (HelloRequest) returns (HelloReply) {}\n}\n\n// The request message containing the user's name.\nmessage HelloRequest {\n  string name = 1;\n}\n\n// The response message containing the greetings\nmessage HelloReply {\n  string message = 1;\n}\n")),(0,r.kt)("p",null,"This message defines request ",(0,r.kt)("inlineCode",{parentName:"p"},"SayHello")," on ",(0,r.kt)("inlineCode",{parentName:"p"},"Greeter")," service\nwhich receives object of type ",(0,r.kt)("inlineCode",{parentName:"p"},"HelloRequest")," containing field ",(0,r.kt)("inlineCode",{parentName:"p"},"name"),"\nand returns object of type ",(0,r.kt)("inlineCode",{parentName:"p"},"HelloReply")," containing field ",(0,r.kt)("inlineCode",{parentName:"p"},"message"),"."),(0,r.kt)("p",null,"This definition is language agnostic meaning any language can implement it, both client and server side."),(0,r.kt)("h3",{id:"create-project"},(0,r.kt)("strong",{parentName:"h3"},"Create Project")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Create new webapi project ",(0,r.kt)("inlineCode",{parentName:"li"},"WebApiDesign.GrpcApi")," and add it to solution ",(0,r.kt)("inlineCode",{parentName:"li"},"WebApiDesign"),".")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sh"},"dotnet new webapi --name WebApiDesign.GrpcApi\ndotnet sln add WebApiDesign.GrpcApi/WebApiDesign.GrpcApi.csproj\n")),(0,r.kt)("p",null,"Add reference to project ",(0,r.kt)("inlineCode",{parentName:"p"},"WebApiDesign.Model")," in project ",(0,r.kt)("inlineCode",{parentName:"p"},"WebApiDesign.GrpcApi")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sh"},"dotnet add WebApiDesign.GrpcApi/WebApiDesign.GrpcApi.csproj reference WebApiDesign.Model/WebApiDesign.Model.csproj\n")),(0,r.kt)("p",null,"Add ",(0,r.kt)("strong",{parentName:"p"},"gRPC")," packages to ",(0,r.kt)("inlineCode",{parentName:"p"},"WebApiDesign.GrpcApi")," project:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sh"},"dotnet add WebApiDesign.GrpcApi/WebApiDesign.GrpcApi.csproj package Grpc.AspNetCore\n")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"In project ",(0,r.kt)("inlineCode",{parentName:"li"},"WebApiDesign.GrpcApi")," delete folder ",(0,r.kt)("inlineCode",{parentName:"li"},"Controllers")," and file ",(0,r.kt)("inlineCode",{parentName:"li"},"WeatherForecast.cs"),":"),(0,r.kt)("li",{parentName:"ul"},"Modify file ",(0,r.kt)("inlineCode",{parentName:"li"},"Program")," to look as following:")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},"using WebApiDesign.GrpcApi.Apis;\nusing WebApiDesign.Model;\n\nvar builder = WebApplication.CreateBuilder(args);\nbuilder.Services.AddGrpc();\nbuilder.Services.AddSingleton(_ => new StudentsRepository(10));\n\nvar app = builder.Build();\n\napp.UseRouting();\napp.MapGrpcService<StudentsApi>();\n\napp.Run();\n")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"In project ",(0,r.kt)("inlineCode",{parentName:"li"},"WebApiDesign.GrpcApi")," add new folder ",(0,r.kt)("inlineCode",{parentName:"li"},"Protos")),(0,r.kt)("li",{parentName:"ul"},"In folder ",(0,r.kt)("inlineCode",{parentName:"li"},"Protos")," create file ",(0,r.kt)("inlineCode",{parentName:"li"},"students.proto")," with following contents:")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-protobuf"},'syntax = "proto3";\n\nservice StudentsService {\n  rpc GetStudents (GetStudentsRequest) returns (GetStudentsResponse);\n  \n  rpc GetStudent (GetStudentRequest) returns (GetStudentResponse);\n}\n\nmessage SubjectType {\n    int32 id = 1;\n    string name = 2;\n    int32 ect = 3;\n}\n\nmessage DateOnlyType {\n    int32 year = 1;\n    int32 month = 2;\n    int32 day = 3;\n}\n\nmessage StudentType {\n    int32 id = 1;\n    string name = 2;\n    DateOnlyType dob = 3;\n    repeated double grades = 4;\n    repeated SubjectType subjects = 5;\n}\n\nmessage GetStudentsRequest { }\n\nmessage GetStudentsResponse {\n    repeated StudentType students = 1;\n}\n\nmessage GetStudentRequest { \n    int32 id = 1;\n}\n\nmessage GetStudentResponse {\n    StudentType student = 1;\n}\n')),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Include proto file in ",(0,r.kt)("inlineCode",{parentName:"li"},"WebApiDesign.GrpcApi.csproj"),":")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-xml"},'  <ItemGroup>\n    <Protobuf Include="Protos\\students.proto" />\n  </ItemGroup>\n')),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Create new file ",(0,r.kt)("inlineCode",{parentName:"li"},"StudentsApi.cs")," in folder ",(0,r.kt)("inlineCode",{parentName:"li"},"Apis")," and add following implementation:")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},'using Grpc.Core;\nusing WebApiDesign.Model;\n\nnamespace WebApiDesign.GrpcApi.Apis;\n\npublic class StudentsApi : StudentsService.StudentsServiceBase\n{\n    private readonly StudentsRepository _studentsRepository;\n\n    public StudentsApi(StudentsRepository studentsRepository)\n    {\n        _studentsRepository = studentsRepository;\n    }\n\n    public override Task<GetStudentsResponse> GetStudents(GetStudentsRequest request, ServerCallContext context)\n    {\n        var students = _studentsRepository\n            .GetAllStudents()\n            .Select(MapStudentToStudentType);\n\n        var response = new GetStudentsResponse();\n        response.Students.AddRange(students);\n\n        return Task.FromResult(response);\n    }\n\n    public override Task<GetStudentResponse> GetStudent(GetStudentRequest request, ServerCallContext context)\n    {\n        var student = _studentsRepository.GetStudent(request.Id);\n\n        if (student is null)\n        {\n            var status = new Status(StatusCode.NotFound, "Student was not found");\n            throw new RpcException(status, "Student was not found");\n        }\n\n        var response = new GetStudentResponse\n        {\n            Student = MapStudentToStudentType(student),\n        };\n\n        return Task.FromResult(response);\n    }\n\n    private StudentType MapStudentToStudentType(Student student)\n    {\n        var studentType = new StudentType\n        {\n            Id = student.Id,\n            Name = student.Name,\n            Dob = new DateOnlyType\n            {\n                Year = student.Dob.Year,\n                Month = student.Dob.Month,\n                Day = student.Dob.Day,\n            },\n        };\n\n        studentType.Grades.AddRange(student.Grades);\n\n        var subjects = studentType.Subjects.Select(subject => new SubjectType\n        {\n            Id = subject.Id,\n            Name = subject.Name,\n            Ect = subject.Ect,\n        });\n        studentType.Subjects.AddRange(subjects);\n\n        return studentType;\n    }\n}\n')),(0,r.kt)("h3",{id:"run-and-test-project-2"},(0,r.kt)("strong",{parentName:"h3"},"Run and test project")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"In Postman application create new gRPC request:")),(0,r.kt)("p",null,(0,r.kt)("img",{alt:"postman-new-grpc-request",src:n(9190).Z,width:"1273",height:"771"})),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"In request import protofile definitions:")),(0,r.kt)("p",null,(0,r.kt)("img",{alt:"postman-grpc-request-import-protofile",src:n(8189).Z,width:"1348",height:"952"})),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Set server URL (",(0,r.kt)("strong",{parentName:"li"},"https port"),") and enable TLS:")),(0,r.kt)("p",null,(0,r.kt)("img",{alt:"postman-grpc-request-url",src:n(168).Z,width:"1350",height:"951"})),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Select method you want to test and write appropriate message:")),(0,r.kt)("p",null,(0,r.kt)("img",{alt:"postman-get-student-grpc-query",src:n(2145).Z,width:"1345",height:"945"})),(0,r.kt)("h2",{id:"exercise-4-grpc-commands"},(0,r.kt)("strong",{parentName:"h2"},"Exercise 4: gRPC Commands")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"In ",(0,r.kt)("inlineCode",{parentName:"p"},"Protos/students.proto")," file define methods on ",(0,r.kt)("inlineCode",{parentName:"p"},"StudentsService"),":"),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"CreateStudent",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"Which receives message containing students name"),(0,r.kt)("li",{parentName:"ul"},"Validates that name is not empty and returns appropriate response"),(0,r.kt)("li",{parentName:"ul"},"Creates student using ",(0,r.kt)("inlineCode",{parentName:"li"},"StudentRepository")),(0,r.kt)("li",{parentName:"ul"},"Returns empty message"))),(0,r.kt)("li",{parentName:"ul"},"UpdateStudent",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"Which receives message containing students name and id"),(0,r.kt)("li",{parentName:"ul"},"Validates  that name is not empty name and returns appropriate response"),(0,r.kt)("li",{parentName:"ul"},"Updates student using ",(0,r.kt)("inlineCode",{parentName:"li"},"StudentRepository")),(0,r.kt)("li",{parentName:"ul"},"Returns empty message"))),(0,r.kt)("li",{parentName:"ul"},"DeleteStudent",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"Which receives message containing students id"),(0,r.kt)("li",{parentName:"ul"},"Deletes student using ",(0,r.kt)("inlineCode",{parentName:"li"},"StudentRepository")),(0,r.kt)("li",{parentName:"ul"},"Returns empty message"))))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"In file ",(0,r.kt)("inlineCode",{parentName:"p"},"StudentApi")," override newly added methods and implement them accordingly"))),(0,r.kt)("h3",{id:"run-and-test-project-3"},(0,r.kt)("strong",{parentName:"h3"},"Run and test project")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"In Postman application create new gRPC requests for added methods and test them.")))}d.isMDXComponent=!0},9844:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/postman-get-student-graphql-query-1-625b4d9c55a7969f41d63320ecc6a0c6.jpg"},5735:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/postman-get-student-graphql-query-2-0ec0154d7ecff42fde44cbc27361ddbe.jpg"},2145:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/postman-get-student-grpc-query-99ff26bb93f400523f41bd81426b5194.jpg"},3629:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/postman-get-students-graphql-query-027fb6686881dc804b287cf8b63b1eb0.jpg"},8189:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/postman-grpc-request-import-protofile-f32d1a731efdd3f779e186024778824d.jpg"},168:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/postman-grpc-request-url-78b54bd31d557b21663605d83e11ba5e.jpg"},9190:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/images/postman-new-grpc-request-2e5bc3adf624cf2aee9c17a57ea000ae.jpg"}}]);