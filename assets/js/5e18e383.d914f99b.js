"use strict";(self.webpackChunkdistributed_systems=self.webpackChunkdistributed_systems||[]).push([[758],{3905:(e,n,t)=>{t.d(n,{Zo:()=>c,kt:()=>u});var a=t(7294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,a,r=function(e,n){if(null==e)return{};var t,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var s=a.createContext({}),m=function(e){var n=a.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},c=function(e){var n=m(e.components);return a.createElement(s.Provider,{value:n},e.children)},p={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},d=a.forwardRef((function(e,n){var t=e.components,r=e.mdxType,o=e.originalType,s=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),d=m(t),u=r,g=d["".concat(s,".").concat(u)]||d[u]||p[u]||o;return t?a.createElement(g,i(i({ref:n},c),{},{components:t})):a.createElement(g,i({ref:n},c))}));function u(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var o=t.length,i=new Array(o);i[0]=d;var l={};for(var s in n)hasOwnProperty.call(n,s)&&(l[s]=n[s]);l.originalType=e,l.mdxType="string"==typeof e?e:r,i[1]=l;for(var m=2;m<o;m++)i[m]=t[m];return a.createElement.apply(null,i)}return a.createElement.apply(null,t)}d.displayName="MDXCreateElement"},1397:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>s,contentTitle:()=>i,default:()=>p,frontMatter:()=>o,metadata:()=>l,toc:()=>m});var a=t(7462),r=(t(7294),t(3905));const o={},i="Phase 4 - Homework",l={unversionedId:"project/Phase 4/Homework",id:"project/Phase 4/Homework",title:"Phase 4 - Homework",description:"Table Of Contents",source:"@site/docs/project/04.Phase 4/Homework.md",sourceDirName:"project/04.Phase 4",slug:"/project/Phase 4/Homework",permalink:"/docs/project/Phase 4/Homework",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Phase 3 - Notes",permalink:"/docs/project/Phase 3/Notes"},next:{title:"Phase 4 - Notes",permalink:"/docs/project/Phase 4/Notes"}},s={},m=[{value:"Table Of Contents",id:"table-of-contents",level:2},{value:"Homework Assignment",id:"homework-assignment",level:2},{value:"Error Handling",id:"error-handling",level:3},{value:"DTOs",id:"dtos",level:3},{value:"Configuration",id:"configuration",level:3},{value:"Extra Points",id:"extra-points",level:2},{value:"Error Handling",id:"error-handling-1",level:3},{value:"DTOs",id:"dtos-1",level:3},{value:"Configuration",id:"configuration-1",level:3}],c={toc:m};function p(e){let{components:n,...t}=e;return(0,r.kt)("wrapper",(0,a.Z)({},c,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"phase-4---homework"},"Phase 4 - Homework"),(0,r.kt)("h2",{id:"table-of-contents"},"Table Of Contents"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#phase-4---homework"},"Phase 4 - Homework"),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#table-of-contents"},"Table Of Contents")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#homework-assignment"},"Homework Assignment"),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#error-handling"},"Error Handling")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#dtos"},"DTOs")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#configuration"},"Configuration")))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#extra-points"},"Extra Points"),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#error-handling-1"},"Error Handling")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#dtos-1"},"DTOs")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#configuration-1"},"Configuration"))))))),(0,r.kt)("h2",{id:"homework-assignment"},"Homework Assignment"),(0,r.kt)("h3",{id:"error-handling"},"Error Handling"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"Create custom exceptions for the application"),(0,r.kt)("li",{parentName:"ol"},"Implement validation and exception throwing in ",(0,r.kt)("em",{parentName:"li"},"Logic")," class"),(0,r.kt)("li",{parentName:"ol"},"Implement error handling filter.")),(0,r.kt)("h3",{id:"dtos"},"DTOs"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"Create specific DTOs for the application"),(0,r.kt)("li",{parentName:"ol"},"Update controllers to accept and return DTOs instead of the model")),(0,r.kt)("h3",{id:"configuration"},"Configuration"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"Add ",(0,r.kt)("em",{parentName:"li"},"ConnectionString")," to the ",(0,r.kt)("inlineCode",{parentName:"li"},"appsettings.json")," file."),(0,r.kt)("li",{parentName:"ol"},"Implement configuration reading from the ",(0,r.kt)("inlineCode",{parentName:"li"},"appsettings.json")," for the ",(0,r.kt)("em",{parentName:"li"},"ConnectionString")),(0,r.kt)("li",{parentName:"ol"},"Update ",(0,r.kt)("em",{parentName:"li"},"Repository")," class to read value from the ",(0,r.kt)("inlineCode",{parentName:"li"},"appsettings.json")," instead of hardcoding the connection string. ")),(0,r.kt)("h2",{id:"extra-points"},"Extra Points"),(0,r.kt)("p",null,"The students that implement any of the the following (ideally all) will be awarded with extra points:"),(0,r.kt)("h3",{id:"error-handling-1"},"Error Handling"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"Currently, the ",(0,r.kt)("em",{parentName:"li"},"ErrorFilter")," has to be registered for each controller. This leaves room for human error if a developer misses a controller, which would mean the application would break or the hacker could get internal information if an error occur in that controller. For extra points, find a way to register the ",(0,r.kt)("em",{parentName:"li"},"ErrorFilter")," to each controller by default. HINT: This would probably require changing the code in ",(0,r.kt)("inlineCode",{parentName:"li"},"Program.cs"),". ")),(0,r.kt)("h3",{id:"dtos-1"},"DTOs"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"Instead of manually creating model objects from DTOs in controller and vice versa, like below, in each DTO class create two public functions:",(0,r.kt)("ol",{parentName:"li"},(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("inlineCode",{parentName:"li"},"public Email ToModel()")," - A function that creates a new ",(0,r.kt)("inlineCode",{parentName:"li"},"Email")," model from the DTO"),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("inlineCode",{parentName:"li"},"public static NewMailRequestDTO FromModel(Email model)")," - A function that takes a model ",(0,r.kt)("inlineCode",{parentName:"li"},"Email")," and copies all fields to the DTO")))),(0,r.kt)("admonition",{type:"danger"},(0,r.kt)("mdxAdmonitionTitle",{parentName:"admonition"},(0,r.kt)("strong",{parentName:"mdxAdmonitionTitle"},"Manually creating DTOs and models")),(0,r.kt)("pre",{parentName:"admonition"},(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},'public class EmailController : ControllerBase\n{\n    // ...\n\n    [HttpGet("all")]\n    public IEnumerable<MailDTO> GetEmails()\n    {\n        var emailList = _emailLogic.GetEmails();\n        return emailList.Select(x => new MailDTO\n        {\n            Id = x.Id,\n            Subject = x.Subject,\n            Message = x.Message,\n            Sender = x.Sender,\n            Recepient = x.Recepient\n        });\n    }\n\n    [HttpPost("new")]\n    public IEnumerable<MailDTO> AddNewEmail([FromBody] NewMailRequestDTO email)\n    {\n        // [BAD] Manually creating model from DTO\n        Email model = new Email(\n             email.Sender,\n             email.Recepient,\n             email.Subject,\n             email.Message\n        );\n\n        var emailList = _emailLogic.AddEmail(model);\n\n        // [BAD] Manually creating DTO from model\n        return emailList.Select(x => new MailDTO\n        {\n            Id = x.Id,\n            Subject = x.Subject,\n            Message = x.Message,\n            Sender = x.Sender,\n            Recepient = x.Recepient\n        });\n    }\n\n    // ...\n}\n'))),(0,r.kt)("admonition",{type:"tip"},(0,r.kt)("mdxAdmonitionTitle",{parentName:"admonition"},(0,r.kt)("strong",{parentName:"mdxAdmonitionTitle"},"Creating conversion methods")),(0,r.kt)("pre",{parentName:"admonition"},(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},'// --------------- DTO\\NewMailRequestDTO.cs - BEGIN\n\n    public class NewMailRequestDTO\n    {\n        [JsonPropertyName("sender")]\n        public string? Sender { get; set; }\n\n        [JsonPropertyName("recepient")]\n        public string? Recepient { get; set; }\n\n        [JsonPropertyName("subject")]\n        public string? Subject { get; set; }\n\n        [JsonPropertyName("message")]\n        public string? Message { get; set; }\n\n        // Added two methods for converting Model <-> DTO\n        public Email ToModel()\n        {\n            return new Email\n            (\n                 this.Sender,\n                 this.Recepient,\n                 this.Subject,\n                 this.Message\n            );\n        }\n\n        public static NewMailRequestDTO FromModel(Email model)\n        {\n            return new NewMailRequestDTO\n            {\n                Subject = model.Subject,\n                Message = model.Message,\n                Sender = model.Sender,\n                Recepient = model.Recepient\n            };\n        }\n    }\n\n// --------------- DTO\\NewMailRequestDTO.cs - END\n')),(0,r.kt)("pre",{parentName:"admonition"},(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},'// --------------- DTO\\MailDTO.cs - BEGIN\n\n    public class NewMailRequestDTO\n    {\n        [JsonPropertyName("id")]\n        public long Id { get; set; }\n\n        [JsonPropertyName("sender")]\n        public string? Sender { get; set; }\n\n        [JsonPropertyName("recepient")]\n        public string? Recepient { get; set; }\n\n        [JsonPropertyName("subject")]\n        public string? Subject { get; set; }\n\n        [JsonPropertyName("message")]\n        public string? Message { get; set; }\n\n        // Added two methods for converting Model <-> DTO\n\n        public Email ToModel()\n        {\n            return new Email\n            (\n                 this.Id,\n                 this.Sender,\n                 this.Recepient,\n                 this.Subject,\n                 this.Message\n            );\n        }\n\n        public static MailDTO FromModel(Email model)\n        {\n            return new MailDTO\n            {\n                Id = model.Id,\n                Subject = model.Subject,\n                Message = model.Message,\n                Sender = model.Sender,\n                Recepient = model.Recepient\n            };\n        }\n    }\n\n// --------------- DTO\\MailDTO.cs - END\n')),(0,r.kt)("pre",{parentName:"admonition"},(0,r.kt)("code",{parentName:"pre",className:"language-csharp"},'// --------------- Controllers\\EmailController.cs - BEGIN\npublic class EmailController : ControllerBase\n{\n    // ...\n\n    [HttpGet("all")]\n    public IEnumerable<MailDTO> GetEmails()\n    {\n        var emailList = _emailLogic.GetEmails();\n\n        // [GOOD] Better way of converting models to DTOs\n        return emailList.Select( x => MailDTO.FromModel(x) );\n    }\n\n    [HttpPost("new")]\n    public IEnumerable<MailDTO> AddNewEmail([FromBody] NewMailRequestDTO email)\n    {\n        // [GOOD] Better way of converting a DTO to model\n        Email model = email.ToModel();\n\n        var emailList = _emailLogic.AddEmail(model);\n\n        // [GOOD] Better way of converting models to DTOs\n        return emailList.Select( x => MailDTO.FromModel(x) );\n    }\n\n    // ...\n}\n// --------------- Controllers\\EmailController.cs - END\n'))),(0,r.kt)("h3",{id:"configuration-1"},"Configuration"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"Create configuration values for validation parameters e.g. maximum number of characters in certain fields, and update logic class to read this configuration.")),(0,r.kt)("admonition",{type:"info"},(0,r.kt)("mdxAdmonitionTitle",{parentName:"admonition"},(0,r.kt)("strong",{parentName:"mdxAdmonitionTitle"},"An example of appsettings.json")),(0,r.kt)("pre",{parentName:"admonition"},(0,r.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "Logging": {\n    "LogLevel": {\n      "Default": "Information",\n      "Microsoft.AspNetCore": "Warning"\n    }\n  },\n  "AllowedHosts": "*",\n    "Database": {\n        "ConnectionString": "Data Source=S:\\\\PI_DIS_24_25\\\\pkaselj-lab-07\\\\bin\\\\Debug\\\\net6.0\\\\emails.db"\n    },\n    "Validation": {\n        "MaxSubjectLength": 50,\n        "MaxMessageLength": 1000,\n        "MaxEmailLength": 50\n    }\n}\n\n'))))}p.isMDXComponent=!0}}]);