"use strict";(self.webpackChunkdistributed_systems=self.webpackChunkdistributed_systems||[]).push([[830],{3905:(e,t,r)=>{r.d(t,{Zo:()=>c,kt:()=>f});var n=r(7294);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function o(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function l(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?o(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function i(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},o=Object.keys(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var s=n.createContext({}),p=function(e){var t=n.useContext(s),r=t;return e&&(r="function"==typeof e?e(t):l(l({},t),e)),r},c=function(e){var t=p(e.components);return n.createElement(s.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},u=n.forwardRef((function(e,t){var r=e.components,a=e.mdxType,o=e.originalType,s=e.parentName,c=i(e,["components","mdxType","originalType","parentName"]),u=p(r),f=a,d=u["".concat(s,".").concat(f)]||u[f]||m[f]||o;return r?n.createElement(d,l(l({ref:t},c),{},{components:r})):n.createElement(d,l({ref:t},c))}));function f(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=r.length,l=new Array(o);l[0]=u;var i={};for(var s in t)hasOwnProperty.call(t,s)&&(i[s]=t[s]);i.originalType=e,i.mdxType="string"==typeof e?e:a,l[1]=i;for(var p=2;p<o;p++)l[p]=r[p];return n.createElement.apply(null,l)}return n.createElement.apply(null,r)}u.displayName="MDXCreateElement"},8336:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>s,contentTitle:()=>l,default:()=>m,frontMatter:()=>o,metadata:()=>i,toc:()=>p});var n=r(7462),a=(r(7294),r(3905));const o={},l="Phase 2 - Homework",i={unversionedId:"project/Phase 2/Homework",id:"project/Phase 2/Homework",title:"Phase 2 - Homework",description:"Table Of Contents",source:"@site/docs/project/02.Phase 2/Homework.md",sourceDirName:"project/02.Phase 2",slug:"/project/Phase 2/Homework",permalink:"/docs/project/Phase 2/Homework",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Phase 1 - Notes",permalink:"/docs/project/Phase 1/Notes"},next:{title:"Phase 2 - Notes",permalink:"/docs/project/Phase 2/Notes"}},s={},p=[{value:"Table Of Contents",id:"table-of-contents",level:2},{value:"Homework Assignment",id:"homework-assignment",level:2},{value:"Extra Points",id:"extra-points",level:2}],c={toc:p};function m(e){let{components:t,...r}=e;return(0,a.kt)("wrapper",(0,n.Z)({},c,r,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"phase-2---homework"},"Phase 2 - Homework"),(0,a.kt)("h2",{id:"table-of-contents"},"Table Of Contents"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"#phase-2---homework"},"Phase 2 - Homework"),(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"#table-of-contents"},"Table Of Contents")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"#homework-assignment"},"Homework Assignment")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"#extra-points"},"Extra Points"))))),(0,a.kt)("h2",{id:"homework-assignment"},"Homework Assignment"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Create an SQLite database with a table for storing data according to your model"),(0,a.kt)("li",{parentName:"ul"},"Create a repository for interfacing with SQLite - NOTE: Implement using interfaces",(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},"Implement CRUD - Create/Read/Update/Delete methods")))),(0,a.kt)("h2",{id:"extra-points"},"Extra Points"),(0,a.kt)("p",null,"The students that implement any of the the following (ideally all) will be awarded with extra points:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"One model field must be an array/list e.g. An email can have multiple recepients.",(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},"Store that field into database using multiple tables and joins",(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},"One way is to create a new email (database row) for each sender-recepient pair"),(0,a.kt)("li",{parentName:"ul"},"Another way is to create multiple tables and use JOINs ",(0,a.kt)("a",{parentName:"li",href:"https://stackoverflow.com/a/17371729"},"HINT")))))),(0,a.kt)("li",{parentName:"ul"},"Instead of SQLite use another database provider like MSSQL, MySQL, etc.")))}m.isMDXComponent=!0}}]);